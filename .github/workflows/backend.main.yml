name: deploy-backend
on:
  push:
    branches:
      - "main"
    paths:
      - "backend/**"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.x
      - name: Install dependencies
        run: |
          cd backend/api/
          pip install -r requirements.txt
      - name: Run tests
        run: |
          cd backend/tests/
          pip install pytest
          python test_api.py
      - name: Build package
        run: |
          cd backend/api
          pip install --target=./package -r requirements.txt
          zip -r ../function.zip .
          cd ../
          mv function.zip ../function.zip
  terraform:
    name: 'Terraform'
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
    runs-on: ubuntu-latest
    environment: production
# Use the Bash shell regardless of whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3
# Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
# Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init
      working-directory: ./backend/
# Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false
      working-directory: ./backend/
# Apply Terraform changes
    - name: Terraform Apply
      run: terraform apply -auto-approve -input=false
      working-directory: ./backend/
    - name: Get Output Variables
      id: output-vars
      run: |
        echo "::set-output name=resource_group::$(terraform output -raw azurerm_resource_group_name)"
        echo "::set-output name=function_app_name::$(terraform output -raw azurerm_function_app_name)"
    - name: Deploy Function
      run: |
        cd ./backend/api
        az functionapp deployment source config-zip -g ${{ steps.output-vars.outputs.resource_group }} -n ${{ steps.output-vars.outputs.function_app_name }} --src ../function.zip --build-remote true
#       - name: Azure Login
#         uses: azure/login@v1
#         with:
#           creds: ${{ secrets.AZURE_CREDENTIALS }}
#       - name: Deploy Azure resources
#         uses: azure/arm-deploy@v1
#         with:
#           subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
#           resourceGroupName: resume-challenge
#           template: backend/azure-resource-template.json
#       - name: Deploy Azure Function
#         uses: azure/functions-action@v1
#         with:
#           app-name: azurefunctioncount
#           package: ./function.zip
#       - name: Logout
#         run: |
#           az logout
#         if: always()
